## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

name: Sample App Deployment - Dotnet ECR
on:
  workflow_dispatch: # be able to run the workflow on demand
  push:
permissions:
  id-token: write
  contents: read

jobs:
  upload-main-service-image:
    strategy:
      fail-fast: false
      matrix:
        aws-region: [ 'us-east-1' ]
        dotnet-version: [ '6.0', '8.0' ]
    runs-on: ubuntu-latest
    env:
      DEFAULT_VERSION: '8.0'
      DOTNET_VERSION: ${{ matrix.dotnet-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.E2E_IAD_TEST_ACCOUNT_ARN }}
          aws-region: us-east-1

      # - name: Retrieve account
      #   uses: aws-actions/aws-secretsmanager-get-secrets@v1
      #   with:
      #     secret-ids:
      #       ACCOUNT_ID, region-account/${{ matrix.aws-region }}

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ secrets.E2E_TEST_ROLE_ARN }}
      #     aws-region: ${{ matrix.aws-region }}
      - name: Update .NET version if not default
        working-directory: sample-apps/dotnet
        run: |
          if [ "${DOTNET_VERSION}" != "${DEFAULT_VERSION}" ]; then
            echo "Updating .NET version from ${DEFAULT_VERSION} to ${DOTNET_VERSION}"
            
            # Function to update version in files
            update_version() {
              local file=$1
              if [ ! -f "$file" ]; then
                echo "Error: File $file not found"
                exit 1
              }
              
              # Update TargetFramework in csproj files
              if [[ $file == *.csproj ]]; then
                sed -i "s/<TargetFramework>netcoreapp${DEFAULT_VERSION}<\/TargetFramework>/<TargetFramework>netcoreapp${DOTNET_VERSION}<\/TargetFramework>/g" "$file"
              # Update version in Dockerfiles
              elif [[ $file == */Dockerfile ]]; then
                # Update SDK version
                sed -i "s/mcr.microsoft.com\/dotnet\/sdk:${DEFAULT_VERSION}/mcr.microsoft.com\/dotnet\/sdk:${DOTNET_VERSION}/g" "$file"
    
                # Update ASP.NET runtime version
                sed -i "s/mcr.microsoft.com\/dotnet\/aspnet:${DEFAULT_VERSION}/mcr.microsoft.com\/dotnet\/aspnet:${DOTNET_VERSION}/g" "$file"
              fi
              
              if [ $? -ne 0 ]; then
                echo "Error: Failed to update version in $file"
                exit 1
              }
              echo "Successfully updated $file"
            }

            # Update all relevant files
            update_version "asp_frontend_service/Dockerfile"
            update_version "asp_remote_service/Dockerfile"
            update_version "asp_frontend_service/asp_frontend_service.csproj"
            update_version "asp_remote_service/asp_remote_service.csproj"

            # Verify changes
            echo "Verifying changes..."
            echo "=== Frontend Dockerfile ==="
            grep -n "FROM.*${DOTNET_VERSION}" asp_frontend_service/Dockerfile
            echo "=== Remote Dockerfile ==="
            grep -n "FROM.*${DOTNET_VERSION}" asp_remote_service/Dockerfile
            echo "=== Frontend csproj ==="
            grep -n "TargetFramework" asp_frontend_service/asp_frontend_service.csproj
            echo "=== Remote csproj ==="
            grep -n "TargetFramework" asp_remote_service/asp_remote_service.csproj
          else
            echo "Using default version ${DEFAULT_VERSION}, no changes needed"
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker compose build
        working-directory: sample-apps/dotnet
        run: |
          docker compose build

      - name: Upload Main Service Image
        run: |
          docker tag dotnetsampleapp/frontend-service 890742580622.dkr.ecr.us-east-1.amazonaws.com/dotnet-sample-app:${DOTNET_VERSION}
          docker push 890742580622.dkr.ecr.us-east-1.amazonaws.com/dotnet-sample-app:${DOTNET_VERSION}
      # - name: Upload Remote Service Image
      #   run: |
      #     docker tag dotnetsampleapp/remote-service ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ matrix.aws-region }}.amazonaws.com/${{ secrets.APP_SIGNALS_DOTNET_E2E_RE_SA_IMG }}
      #     docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ matrix.aws-region }}.amazonaws.com/${{ secrets.APP_SIGNALS_DOTNET_E2E_RE_SA_IMG }}
